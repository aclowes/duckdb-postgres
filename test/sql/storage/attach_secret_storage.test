# name: test/sql/storage/attach_secret_storage.test
# description: Test storing secrets in postgres database
# group: [storage]

require postgres_scanner

require-env POSTGRES_TEST_DATABASE_AVAILABLE

statement ok
PRAGMA enable_verification

# Clean up any leftover secrets from previous test runs by attaching, dropping table, and reattaching
statement ok
ATTACH 'dbname=postgresscanner' AS pg_cleanup (TYPE POSTGRES)

statement ok
CALL postgres_execute('pg_cleanup', 'DROP TABLE IF EXISTS duckdb_secrets')

statement ok
DETACH pg_cleanup

# Attach postgres database
statement ok
ATTACH 'dbname=postgresscanner' AS pg (TYPE POSTGRES)

# Load httpfs for S3 secret type
statement ok
INSTALL httpfs

statement ok
LOAD httpfs

# Create a secret explicitly in postgres storage
statement ok
CREATE SECRET test_s3_secret IN postgres_pg (
	TYPE S3,
	KEY_ID 'test_key_id',
	SECRET 'test_secret_value',
	REGION 'us-east-1'
)

# Verify the secret appears in duckdb_secrets with correct storage
query III
SELECT name, type, storage FROM duckdb_secrets() WHERE name='test_s3_secret' ORDER BY name
----
test_s3_secret	s3	postgres_pg

# Verify the secret was written to postgres by checking via postgres_query
query II
SELECT secret_name, secret_type FROM postgres_query('pg', 'SELECT secret_name, secret_type FROM duckdb_secrets WHERE secret_name = ''test_s3_secret''')
----
test_s3_secret	s3

# Create another secret in postgres storage
statement ok
CREATE SECRET another_secret IN postgres_pg (
	TYPE S3,
	KEY_ID 'another_key',
	SECRET 'another_value'
)

# Verify both secrets exist
query I
SELECT COUNT(*) FROM duckdb_secrets() WHERE storage='postgres_pg'
----
2

# Drop a secret from postgres storage
statement ok
DROP SECRET test_s3_secret FROM postgres_pg

# Verify it was removed
query I
SELECT COUNT(*) FROM duckdb_secrets() WHERE name='test_s3_secret'
----
0

# Verify it was removed from postgres
query I
SELECT COUNT(*) FROM postgres_query('pg', 'SELECT * FROM duckdb_secrets WHERE secret_name = ''test_s3_secret''')
----
0

# The other secret should still exist
query III
SELECT name, type, storage FROM duckdb_secrets() WHERE name='another_secret'
----
another_secret	s3	postgres_pg

# Clean up
statement ok
DROP SECRET another_secret FROM postgres_pg

# Verify duckdb_secrets table is empty in postgres
query I
SELECT COUNT(*) FROM postgres_query('pg', 'SELECT * FROM duckdb_secrets')
----
0

statement ok
DETACH pg

# Test reading secrets after detach and reattach
statement ok
ATTACH 'dbname=postgresscanner' AS pg2 (TYPE POSTGRES)

# Create a secret for persistence test
statement ok
CREATE SECRET persistent_secret IN postgres_pg2 (
	TYPE S3,
	KEY_ID 'persistent_key',
	SECRET 'persistent_secret',
	REGION 'us-west-2'
)

# Verify it exists
query III
SELECT name, type, storage FROM duckdb_secrets() WHERE name='persistent_secret'
----
persistent_secret	s3	postgres_pg2

# Detach the database
statement ok
DETACH pg2

# Reattach - this should load the secret from postgres
statement ok
ATTACH 'dbname=postgresscanner' AS pg3 (TYPE POSTGRES)

# Verify the secret is still accessible after reattach (tests read functionality)
query III
SELECT name, type, storage FROM duckdb_secrets() WHERE name='persistent_secret'
----
persistent_secret	s3	postgres_pg3

# Clean up
statement ok
DROP SECRET persistent_secret FROM postgres_pg3

# Verify it was removed
query I
SELECT COUNT(*) FROM duckdb_secrets() WHERE name='persistent_secret'
----
0

statement ok
DETACH pg3
